// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// @brief
  ///
  /// @return bool
  bool simpleble_adapter_is_bluetooth_enabled() {
    return _simpleble_adapter_is_bluetooth_enabled();
  }

  late final _simpleble_adapter_is_bluetooth_enabledPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
          'simpleble_adapter_is_bluetooth_enabled');
  late final _simpleble_adapter_is_bluetooth_enabled =
      _simpleble_adapter_is_bluetooth_enabledPtr.asFunction<bool Function()>();

  /// @brief
  ///
  /// @return size_t
  int simpleble_adapter_get_count() {
    return _simpleble_adapter_get_count();
  }

  late final _simpleble_adapter_get_countPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'simpleble_adapter_get_count');
  late final _simpleble_adapter_get_count =
      _simpleble_adapter_get_countPtr.asFunction<int Function()>();

  /// @brief
  ///
  /// @note The user is responsible for freeing the returned adapter object
  /// by calling `simpleble_adapter_release_handle`.
  ///
  /// @param index
  /// @return simpleble_adapter_t
  simpleble_adapter_t simpleble_adapter_get_handle(
    int index,
  ) {
    return _simpleble_adapter_get_handle(
      index,
    );
  }

  late final _simpleble_adapter_get_handlePtr =
      _lookup<ffi.NativeFunction<simpleble_adapter_t Function(ffi.Size)>>(
          'simpleble_adapter_get_handle');
  late final _simpleble_adapter_get_handle = _simpleble_adapter_get_handlePtr
      .asFunction<simpleble_adapter_t Function(int)>();

  /// @brief Releases all memory and resources consumed by the specific
  /// instance of simpleble_adapter_t.
  ///
  /// @param handle
  void simpleble_adapter_release_handle(
    simpleble_adapter_t handle,
  ) {
    return _simpleble_adapter_release_handle(
      handle,
    );
  }

  late final _simpleble_adapter_release_handlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(simpleble_adapter_t)>>(
          'simpleble_adapter_release_handle');
  late final _simpleble_adapter_release_handle =
      _simpleble_adapter_release_handlePtr
          .asFunction<void Function(simpleble_adapter_t)>();

  /// @brief Returns the identifier of a given adapter.
  ///
  /// @note The user is responsible for freeing the returned value.
  ///
  /// @param handle
  /// @return char*
  ffi.Pointer<ffi.Char> simpleble_adapter_identifier(
    simpleble_adapter_t handle,
  ) {
    return _simpleble_adapter_identifier(
      handle,
    );
  }

  late final _simpleble_adapter_identifierPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(simpleble_adapter_t)>>(
      'simpleble_adapter_identifier');
  late final _simpleble_adapter_identifier = _simpleble_adapter_identifierPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(simpleble_adapter_t)>();

  /// @brief Returns the MAC address of a given adapter.
  ///
  /// @note The user is responsible for freeing the returned value.
  ///
  /// @param handle
  /// @return char*
  ffi.Pointer<ffi.Char> simpleble_adapter_address(
    simpleble_adapter_t handle,
  ) {
    return _simpleble_adapter_address(
      handle,
    );
  }

  late final _simpleble_adapter_addressPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(simpleble_adapter_t)>>(
      'simpleble_adapter_address');
  late final _simpleble_adapter_address = _simpleble_adapter_addressPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(simpleble_adapter_t)>();

  /// @brief
  ///
  /// @param handle
  /// @return simpleble_err_t
  int simpleble_adapter_scan_start(
    simpleble_adapter_t handle,
  ) {
    return _simpleble_adapter_scan_start(
      handle,
    );
  }

  late final _simpleble_adapter_scan_startPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(simpleble_adapter_t)>>(
          'simpleble_adapter_scan_start');
  late final _simpleble_adapter_scan_start = _simpleble_adapter_scan_startPtr
      .asFunction<int Function(simpleble_adapter_t)>();

  /// @brief
  ///
  /// @param handle
  /// @return simpleble_err_t
  int simpleble_adapter_scan_stop(
    simpleble_adapter_t handle,
  ) {
    return _simpleble_adapter_scan_stop(
      handle,
    );
  }

  late final _simpleble_adapter_scan_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(simpleble_adapter_t)>>(
          'simpleble_adapter_scan_stop');
  late final _simpleble_adapter_scan_stop = _simpleble_adapter_scan_stopPtr
      .asFunction<int Function(simpleble_adapter_t)>();

  /// @brief
  ///
  /// @param handle
  /// @param active
  /// @return simpleble_err_t
  int simpleble_adapter_scan_is_active(
    simpleble_adapter_t handle,
    ffi.Pointer<ffi.Bool> active,
  ) {
    return _simpleble_adapter_scan_is_active(
      handle,
      active,
    );
  }

  late final _simpleble_adapter_scan_is_activePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(simpleble_adapter_t,
              ffi.Pointer<ffi.Bool>)>>('simpleble_adapter_scan_is_active');
  late final _simpleble_adapter_scan_is_active =
      _simpleble_adapter_scan_is_activePtr.asFunction<
          int Function(simpleble_adapter_t, ffi.Pointer<ffi.Bool>)>();

  /// @brief
  ///
  /// @param handle
  /// @param timeout_ms
  /// @return simpleble_err_t
  int simpleble_adapter_scan_for(
    simpleble_adapter_t handle,
    int timeout_ms,
  ) {
    return _simpleble_adapter_scan_for(
      handle,
      timeout_ms,
    );
  }

  late final _simpleble_adapter_scan_forPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(simpleble_adapter_t, ffi.Int)>>(
      'simpleble_adapter_scan_for');
  late final _simpleble_adapter_scan_for = _simpleble_adapter_scan_forPtr
      .asFunction<int Function(simpleble_adapter_t, int)>();

  /// @brief
  ///
  /// @param handle
  /// @return size_t
  int simpleble_adapter_scan_get_results_count(
    simpleble_adapter_t handle,
  ) {
    return _simpleble_adapter_scan_get_results_count(
      handle,
    );
  }

  late final _simpleble_adapter_scan_get_results_countPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(simpleble_adapter_t)>>(
          'simpleble_adapter_scan_get_results_count');
  late final _simpleble_adapter_scan_get_results_count =
      _simpleble_adapter_scan_get_results_countPtr
          .asFunction<int Function(simpleble_adapter_t)>();

  /// @brief
  ///
  /// @note The user is responsible for freeing the returned peripheral object
  /// by calling `simpleble_peripheral_release_handle`.
  ///
  /// @param handle
  /// @param index
  /// @return simpleble_peripheral_t
  simpleble_peripheral_t simpleble_adapter_scan_get_results_handle(
    simpleble_adapter_t handle,
    int index,
  ) {
    return _simpleble_adapter_scan_get_results_handle(
      handle,
      index,
    );
  }

  late final _simpleble_adapter_scan_get_results_handlePtr = _lookup<
      ffi.NativeFunction<
          simpleble_peripheral_t Function(simpleble_adapter_t,
              ffi.Size)>>('simpleble_adapter_scan_get_results_handle');
  late final _simpleble_adapter_scan_get_results_handle =
      _simpleble_adapter_scan_get_results_handlePtr.asFunction<
          simpleble_peripheral_t Function(simpleble_adapter_t, int)>();

  /// @brief
  ///
  /// @param handle
  /// @return size_t
  int simpleble_adapter_get_paired_peripherals_count(
    simpleble_adapter_t handle,
  ) {
    return _simpleble_adapter_get_paired_peripherals_count(
      handle,
    );
  }

  late final _simpleble_adapter_get_paired_peripherals_countPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(simpleble_adapter_t)>>(
          'simpleble_adapter_get_paired_peripherals_count');
  late final _simpleble_adapter_get_paired_peripherals_count =
      _simpleble_adapter_get_paired_peripherals_countPtr
          .asFunction<int Function(simpleble_adapter_t)>();

  /// @brief
  ///
  /// @note The user is responsible for freeing the returned peripheral object
  /// by calling `simpleble_peripheral_release_handle`.
  ///
  /// @param handle
  /// @param index
  /// @return simpleble_peripheral_t
  simpleble_peripheral_t simpleble_adapter_get_paired_peripherals_handle(
    simpleble_adapter_t handle,
    int index,
  ) {
    return _simpleble_adapter_get_paired_peripherals_handle(
      handle,
      index,
    );
  }

  late final _simpleble_adapter_get_paired_peripherals_handlePtr = _lookup<
      ffi.NativeFunction<
          simpleble_peripheral_t Function(simpleble_adapter_t,
              ffi.Size)>>('simpleble_adapter_get_paired_peripherals_handle');
  late final _simpleble_adapter_get_paired_peripherals_handle =
      _simpleble_adapter_get_paired_peripherals_handlePtr.asFunction<
          simpleble_peripheral_t Function(simpleble_adapter_t, int)>();

  /// @brief
  ///
  /// @param handle
  /// @param callback
  /// @return simpleble_err_t
  int simpleble_adapter_set_callback_on_scan_start(
    simpleble_adapter_t handle,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(simpleble_adapter_t adapter,
                    ffi.Pointer<ffi.Void> userdata)>>
        callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _simpleble_adapter_set_callback_on_scan_start(
      handle,
      callback,
      userdata,
    );
  }

  late final _simpleble_adapter_set_callback_on_scan_startPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  simpleble_adapter_t,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(simpleble_adapter_t adapter,
                              ffi.Pointer<ffi.Void> userdata)>>,
                  ffi.Pointer<ffi.Void>)>>(
      'simpleble_adapter_set_callback_on_scan_start');
  late final _simpleble_adapter_set_callback_on_scan_start =
      _simpleble_adapter_set_callback_on_scan_startPtr.asFunction<
          int Function(
              simpleble_adapter_t,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(simpleble_adapter_t adapter,
                          ffi.Pointer<ffi.Void> userdata)>>,
              ffi.Pointer<ffi.Void>)>();

  /// @brief
  ///
  /// @param handle
  /// @param callback
  /// @return simpleble_err_t
  int simpleble_adapter_set_callback_on_scan_stop(
    simpleble_adapter_t handle,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(simpleble_adapter_t adapter,
                    ffi.Pointer<ffi.Void> userdata)>>
        callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _simpleble_adapter_set_callback_on_scan_stop(
      handle,
      callback,
      userdata,
    );
  }

  late final _simpleble_adapter_set_callback_on_scan_stopPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  simpleble_adapter_t,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(simpleble_adapter_t adapter,
                              ffi.Pointer<ffi.Void> userdata)>>,
                  ffi.Pointer<ffi.Void>)>>(
      'simpleble_adapter_set_callback_on_scan_stop');
  late final _simpleble_adapter_set_callback_on_scan_stop =
      _simpleble_adapter_set_callback_on_scan_stopPtr.asFunction<
          int Function(
              simpleble_adapter_t,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(simpleble_adapter_t adapter,
                          ffi.Pointer<ffi.Void> userdata)>>,
              ffi.Pointer<ffi.Void>)>();

  /// @brief
  ///
  /// @param handle
  /// @param callback
  /// @return simpleble_err_t
  int simpleble_adapter_set_callback_on_scan_updated(
    simpleble_adapter_t handle,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    simpleble_adapter_t adapter,
                    simpleble_peripheral_t peripheral,
                    ffi.Pointer<ffi.Void> userdata)>>
        callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _simpleble_adapter_set_callback_on_scan_updated(
      handle,
      callback,
      userdata,
    );
  }

  late final _simpleble_adapter_set_callback_on_scan_updatedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  simpleble_adapter_t,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              simpleble_adapter_t adapter,
                              simpleble_peripheral_t peripheral,
                              ffi.Pointer<ffi.Void> userdata)>>,
                  ffi.Pointer<ffi.Void>)>>(
      'simpleble_adapter_set_callback_on_scan_updated');
  late final _simpleble_adapter_set_callback_on_scan_updated =
      _simpleble_adapter_set_callback_on_scan_updatedPtr.asFunction<
          int Function(
              simpleble_adapter_t,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          simpleble_adapter_t adapter,
                          simpleble_peripheral_t peripheral,
                          ffi.Pointer<ffi.Void> userdata)>>,
              ffi.Pointer<ffi.Void>)>();

  /// @brief
  ///
  /// @param handle
  /// @param callback
  /// @return simpleble_err_t
  int simpleble_adapter_set_callback_on_scan_found(
    simpleble_adapter_t handle,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    simpleble_adapter_t adapter,
                    simpleble_peripheral_t peripheral,
                    ffi.Pointer<ffi.Void> userdata)>>
        callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _simpleble_adapter_set_callback_on_scan_found(
      handle,
      callback,
      userdata,
    );
  }

  late final _simpleble_adapter_set_callback_on_scan_foundPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  simpleble_adapter_t,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(
                              simpleble_adapter_t adapter,
                              simpleble_peripheral_t peripheral,
                              ffi.Pointer<ffi.Void> userdata)>>,
                  ffi.Pointer<ffi.Void>)>>(
      'simpleble_adapter_set_callback_on_scan_found');
  late final _simpleble_adapter_set_callback_on_scan_found =
      _simpleble_adapter_set_callback_on_scan_foundPtr.asFunction<
          int Function(
              simpleble_adapter_t,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          simpleble_adapter_t adapter,
                          simpleble_peripheral_t peripheral,
                          ffi.Pointer<ffi.Void> userdata)>>,
              ffi.Pointer<ffi.Void>)>();

  /// @brief Releases all memory and resources consumed by the specific
  /// instance of simpleble_peripheral_t.
  ///
  /// @param handle
  void simpleble_peripheral_release_handle(
    simpleble_peripheral_t handle,
  ) {
    return _simpleble_peripheral_release_handle(
      handle,
    );
  }

  late final _simpleble_peripheral_release_handlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(simpleble_peripheral_t)>>(
          'simpleble_peripheral_release_handle');
  late final _simpleble_peripheral_release_handle =
      _simpleble_peripheral_release_handlePtr
          .asFunction<void Function(simpleble_peripheral_t)>();

  /// @brief
  ///
  /// @param handle
  /// @return char*
  ffi.Pointer<ffi.Char> simpleble_peripheral_identifier(
    simpleble_peripheral_t handle,
  ) {
    return _simpleble_peripheral_identifier(
      handle,
    );
  }

  late final _simpleble_peripheral_identifierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              simpleble_peripheral_t)>>('simpleble_peripheral_identifier');
  late final _simpleble_peripheral_identifier =
      _simpleble_peripheral_identifierPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(simpleble_peripheral_t)>();

  /// @brief
  ///
  /// @param handle
  /// @return char*
  ffi.Pointer<ffi.Char> simpleble_peripheral_address(
    simpleble_peripheral_t handle,
  ) {
    return _simpleble_peripheral_address(
      handle,
    );
  }

  late final _simpleble_peripheral_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              simpleble_peripheral_t)>>('simpleble_peripheral_address');
  late final _simpleble_peripheral_address = _simpleble_peripheral_addressPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(simpleble_peripheral_t)>();

  /// @brief
  ///
  /// @param handle
  /// @return simpleble_address_type_t
  int simpleble_peripheral_address_type(
    simpleble_peripheral_t handle,
  ) {
    return _simpleble_peripheral_address_type(
      handle,
    );
  }

  late final _simpleble_peripheral_address_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(simpleble_peripheral_t)>>(
          'simpleble_peripheral_address_type');
  late final _simpleble_peripheral_address_type =
      _simpleble_peripheral_address_typePtr
          .asFunction<int Function(simpleble_peripheral_t)>();

  /// @brief
  ///
  /// @param handle
  /// @return int16_t
  int simpleble_peripheral_rssi(
    simpleble_peripheral_t handle,
  ) {
    return _simpleble_peripheral_rssi(
      handle,
    );
  }

  late final _simpleble_peripheral_rssiPtr =
      _lookup<ffi.NativeFunction<ffi.Int16 Function(simpleble_peripheral_t)>>(
          'simpleble_peripheral_rssi');
  late final _simpleble_peripheral_rssi = _simpleble_peripheral_rssiPtr
      .asFunction<int Function(simpleble_peripheral_t)>();

  /// @brief
  ///
  /// @param handle
  /// @return int16_t
  int simpleble_peripheral_tx_power(
    simpleble_peripheral_t handle,
  ) {
    return _simpleble_peripheral_tx_power(
      handle,
    );
  }

  late final _simpleble_peripheral_tx_powerPtr =
      _lookup<ffi.NativeFunction<ffi.Int16 Function(simpleble_peripheral_t)>>(
          'simpleble_peripheral_tx_power');
  late final _simpleble_peripheral_tx_power = _simpleble_peripheral_tx_powerPtr
      .asFunction<int Function(simpleble_peripheral_t)>();

  /// @brief
  ///
  /// @param handle
  /// @return uint16_t
  int simpleble_peripheral_mtu(
    simpleble_peripheral_t handle,
  ) {
    return _simpleble_peripheral_mtu(
      handle,
    );
  }

  late final _simpleble_peripheral_mtuPtr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(simpleble_peripheral_t)>>(
          'simpleble_peripheral_mtu');
  late final _simpleble_peripheral_mtu = _simpleble_peripheral_mtuPtr
      .asFunction<int Function(simpleble_peripheral_t)>();

  /// @brief
  ///
  /// @param handle
  /// @return simpleble_err_t
  int simpleble_peripheral_connect(
    simpleble_peripheral_t handle,
  ) {
    return _simpleble_peripheral_connect(
      handle,
    );
  }

  late final _simpleble_peripheral_connectPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(simpleble_peripheral_t)>>(
          'simpleble_peripheral_connect');
  late final _simpleble_peripheral_connect = _simpleble_peripheral_connectPtr
      .asFunction<int Function(simpleble_peripheral_t)>();

  /// @brief
  ///
  /// @param handle
  /// @return simpleble_err_t
  int simpleble_peripheral_disconnect(
    simpleble_peripheral_t handle,
  ) {
    return _simpleble_peripheral_disconnect(
      handle,
    );
  }

  late final _simpleble_peripheral_disconnectPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(simpleble_peripheral_t)>>(
          'simpleble_peripheral_disconnect');
  late final _simpleble_peripheral_disconnect =
      _simpleble_peripheral_disconnectPtr
          .asFunction<int Function(simpleble_peripheral_t)>();

  /// @brief
  ///
  /// @param handle
  /// @param connected
  /// @return simpleble_err_t
  int simpleble_peripheral_is_connected(
    simpleble_peripheral_t handle,
    ffi.Pointer<ffi.Bool> connected,
  ) {
    return _simpleble_peripheral_is_connected(
      handle,
      connected,
    );
  }

  late final _simpleble_peripheral_is_connectedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(simpleble_peripheral_t,
              ffi.Pointer<ffi.Bool>)>>('simpleble_peripheral_is_connected');
  late final _simpleble_peripheral_is_connected =
      _simpleble_peripheral_is_connectedPtr.asFunction<
          int Function(simpleble_peripheral_t, ffi.Pointer<ffi.Bool>)>();

  /// @brief
  ///
  /// @param handle
  /// @param connectable
  /// @return simpleble_err_t
  int simpleble_peripheral_is_connectable(
    simpleble_peripheral_t handle,
    ffi.Pointer<ffi.Bool> connectable,
  ) {
    return _simpleble_peripheral_is_connectable(
      handle,
      connectable,
    );
  }

  late final _simpleble_peripheral_is_connectablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(simpleble_peripheral_t,
              ffi.Pointer<ffi.Bool>)>>('simpleble_peripheral_is_connectable');
  late final _simpleble_peripheral_is_connectable =
      _simpleble_peripheral_is_connectablePtr.asFunction<
          int Function(simpleble_peripheral_t, ffi.Pointer<ffi.Bool>)>();

  /// @brief
  ///
  /// @param handle
  /// @param paired
  /// @return simpleble_err_t
  int simpleble_peripheral_is_paired(
    simpleble_peripheral_t handle,
    ffi.Pointer<ffi.Bool> paired,
  ) {
    return _simpleble_peripheral_is_paired(
      handle,
      paired,
    );
  }

  late final _simpleble_peripheral_is_pairedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(simpleble_peripheral_t,
              ffi.Pointer<ffi.Bool>)>>('simpleble_peripheral_is_paired');
  late final _simpleble_peripheral_is_paired =
      _simpleble_peripheral_is_pairedPtr.asFunction<
          int Function(simpleble_peripheral_t, ffi.Pointer<ffi.Bool>)>();

  /// @brief
  ///
  /// @param handle
  /// @return simpleble_err_t
  int simpleble_peripheral_unpair(
    simpleble_peripheral_t handle,
  ) {
    return _simpleble_peripheral_unpair(
      handle,
    );
  }

  late final _simpleble_peripheral_unpairPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(simpleble_peripheral_t)>>(
          'simpleble_peripheral_unpair');
  late final _simpleble_peripheral_unpair = _simpleble_peripheral_unpairPtr
      .asFunction<int Function(simpleble_peripheral_t)>();

  /// @brief
  ///
  /// @param handle
  /// @return size_t
  int simpleble_peripheral_services_count(
    simpleble_peripheral_t handle,
  ) {
    return _simpleble_peripheral_services_count(
      handle,
    );
  }

  late final _simpleble_peripheral_services_countPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(simpleble_peripheral_t)>>(
          'simpleble_peripheral_services_count');
  late final _simpleble_peripheral_services_count =
      _simpleble_peripheral_services_countPtr
          .asFunction<int Function(simpleble_peripheral_t)>();

  /// @brief
  ///
  /// @param handle
  /// @param index
  /// @param services
  /// @return simpleble_err_t
  int simpleble_peripheral_services_get(
    simpleble_peripheral_t handle,
    int index,
    ffi.Pointer<simpleble_service_t> services,
  ) {
    return _simpleble_peripheral_services_get(
      handle,
      index,
      services,
    );
  }

  late final _simpleble_peripheral_services_getPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(simpleble_peripheral_t, ffi.Size,
                  ffi.Pointer<simpleble_service_t>)>>(
      'simpleble_peripheral_services_get');
  late final _simpleble_peripheral_services_get =
      _simpleble_peripheral_services_getPtr.asFunction<
          int Function(
              simpleble_peripheral_t, int, ffi.Pointer<simpleble_service_t>)>();

  /// @brief
  ///
  /// @param handle
  /// @return size_t
  int simpleble_peripheral_manufacturer_data_count(
    simpleble_peripheral_t handle,
  ) {
    return _simpleble_peripheral_manufacturer_data_count(
      handle,
    );
  }

  late final _simpleble_peripheral_manufacturer_data_countPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(simpleble_peripheral_t)>>(
          'simpleble_peripheral_manufacturer_data_count');
  late final _simpleble_peripheral_manufacturer_data_count =
      _simpleble_peripheral_manufacturer_data_countPtr
          .asFunction<int Function(simpleble_peripheral_t)>();

  /// @brief
  ///
  /// @param handle
  /// @param index
  /// @param manufacturer_data
  /// @return simpleble_err_t
  int simpleble_peripheral_manufacturer_data_get(
    simpleble_peripheral_t handle,
    int index,
    ffi.Pointer<simpleble_manufacturer_data_t> manufacturer_data,
  ) {
    return _simpleble_peripheral_manufacturer_data_get(
      handle,
      index,
      manufacturer_data,
    );
  }

  late final _simpleble_peripheral_manufacturer_data_getPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(simpleble_peripheral_t, ffi.Size,
                  ffi.Pointer<simpleble_manufacturer_data_t>)>>(
      'simpleble_peripheral_manufacturer_data_get');
  late final _simpleble_peripheral_manufacturer_data_get =
      _simpleble_peripheral_manufacturer_data_getPtr.asFunction<
          int Function(simpleble_peripheral_t, int,
              ffi.Pointer<simpleble_manufacturer_data_t>)>();

  /// @brief
  ///
  /// @note The user is responsible for freeing the pointer returned in data.
  ///
  /// @param handle
  /// @param service
  /// @param characteristic
  /// @param data
  /// @param data_length
  /// @return simpleble_err_t
  int simpleble_peripheral_read(
    simpleble_peripheral_t handle,
    simpleble_uuid_t service,
    simpleble_uuid_t characteristic,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
    ffi.Pointer<ffi.Size> data_length,
  ) {
    return _simpleble_peripheral_read(
      handle,
      service,
      characteristic,
      data,
      data_length,
    );
  }

  late final _simpleble_peripheral_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              simpleble_peripheral_t,
              simpleble_uuid_t,
              simpleble_uuid_t,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Size>)>>('simpleble_peripheral_read');
  late final _simpleble_peripheral_read =
      _simpleble_peripheral_readPtr.asFunction<
          int Function(
              simpleble_peripheral_t,
              simpleble_uuid_t,
              simpleble_uuid_t,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Size>)>();

  /// @brief
  ///
  /// @param handle
  /// @param service
  /// @param characteristic
  /// @param data
  /// @param data_length
  /// @return simpleble_err_t
  int simpleble_peripheral_write_request(
    simpleble_peripheral_t handle,
    simpleble_uuid_t service,
    simpleble_uuid_t characteristic,
    ffi.Pointer<ffi.Uint8> data,
    int data_length,
  ) {
    return _simpleble_peripheral_write_request(
      handle,
      service,
      characteristic,
      data,
      data_length,
    );
  }

  late final _simpleble_peripheral_write_requestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              simpleble_peripheral_t,
              simpleble_uuid_t,
              simpleble_uuid_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size)>>('simpleble_peripheral_write_request');
  late final _simpleble_peripheral_write_request =
      _simpleble_peripheral_write_requestPtr.asFunction<
          int Function(simpleble_peripheral_t, simpleble_uuid_t,
              simpleble_uuid_t, ffi.Pointer<ffi.Uint8>, int)>();

  /// @brief
  ///
  /// @param handle
  /// @param service
  /// @param characteristic
  /// @param data
  /// @param data_length
  /// @return simpleble_err_t
  int simpleble_peripheral_write_command(
    simpleble_peripheral_t handle,
    simpleble_uuid_t service,
    simpleble_uuid_t characteristic,
    ffi.Pointer<ffi.Uint8> data,
    int data_length,
  ) {
    return _simpleble_peripheral_write_command(
      handle,
      service,
      characteristic,
      data,
      data_length,
    );
  }

  late final _simpleble_peripheral_write_commandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              simpleble_peripheral_t,
              simpleble_uuid_t,
              simpleble_uuid_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size)>>('simpleble_peripheral_write_command');
  late final _simpleble_peripheral_write_command =
      _simpleble_peripheral_write_commandPtr.asFunction<
          int Function(simpleble_peripheral_t, simpleble_uuid_t,
              simpleble_uuid_t, ffi.Pointer<ffi.Uint8>, int)>();

  /// @brief
  ///
  /// @param handle
  /// @param service
  /// @param characteristic
  /// @param callback
  /// @return simpleble_err_t
  int simpleble_peripheral_notify(
    simpleble_peripheral_t handle,
    simpleble_uuid_t service,
    simpleble_uuid_t characteristic,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    simpleble_uuid_t service,
                    simpleble_uuid_t characteristic,
                    ffi.Pointer<ffi.Uint8> data,
                    ffi.Size data_length,
                    ffi.Pointer<ffi.Void> userdata)>>
        callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _simpleble_peripheral_notify(
      handle,
      service,
      characteristic,
      callback,
      userdata,
    );
  }

  late final _simpleble_peripheral_notifyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              simpleble_peripheral_t,
              simpleble_uuid_t,
              simpleble_uuid_t,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          simpleble_uuid_t service,
                          simpleble_uuid_t characteristic,
                          ffi.Pointer<ffi.Uint8> data,
                          ffi.Size data_length,
                          ffi.Pointer<ffi.Void> userdata)>>,
              ffi.Pointer<ffi.Void>)>>('simpleble_peripheral_notify');
  late final _simpleble_peripheral_notify =
      _simpleble_peripheral_notifyPtr.asFunction<
          int Function(
              simpleble_peripheral_t,
              simpleble_uuid_t,
              simpleble_uuid_t,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          simpleble_uuid_t service,
                          simpleble_uuid_t characteristic,
                          ffi.Pointer<ffi.Uint8> data,
                          ffi.Size data_length,
                          ffi.Pointer<ffi.Void> userdata)>>,
              ffi.Pointer<ffi.Void>)>();

  /// @brief
  ///
  /// @param handle
  /// @param service
  /// @param characteristic
  /// @param callback
  /// @return simpleble_err_t
  int simpleble_peripheral_indicate(
    simpleble_peripheral_t handle,
    simpleble_uuid_t service,
    simpleble_uuid_t characteristic,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(
                    simpleble_uuid_t service,
                    simpleble_uuid_t characteristic,
                    ffi.Pointer<ffi.Uint8> data,
                    ffi.Size data_length,
                    ffi.Pointer<ffi.Void> userdata)>>
        callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _simpleble_peripheral_indicate(
      handle,
      service,
      characteristic,
      callback,
      userdata,
    );
  }

  late final _simpleble_peripheral_indicatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              simpleble_peripheral_t,
              simpleble_uuid_t,
              simpleble_uuid_t,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          simpleble_uuid_t service,
                          simpleble_uuid_t characteristic,
                          ffi.Pointer<ffi.Uint8> data,
                          ffi.Size data_length,
                          ffi.Pointer<ffi.Void> userdata)>>,
              ffi.Pointer<ffi.Void>)>>('simpleble_peripheral_indicate');
  late final _simpleble_peripheral_indicate =
      _simpleble_peripheral_indicatePtr.asFunction<
          int Function(
              simpleble_peripheral_t,
              simpleble_uuid_t,
              simpleble_uuid_t,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          simpleble_uuid_t service,
                          simpleble_uuid_t characteristic,
                          ffi.Pointer<ffi.Uint8> data,
                          ffi.Size data_length,
                          ffi.Pointer<ffi.Void> userdata)>>,
              ffi.Pointer<ffi.Void>)>();

  /// @brief
  ///
  /// @param handle
  /// @param service
  /// @param characteristic
  /// @return simpleble_err_t
  int simpleble_peripheral_unsubscribe(
    simpleble_peripheral_t handle,
    simpleble_uuid_t service,
    simpleble_uuid_t characteristic,
  ) {
    return _simpleble_peripheral_unsubscribe(
      handle,
      service,
      characteristic,
    );
  }

  late final _simpleble_peripheral_unsubscribePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(simpleble_peripheral_t, simpleble_uuid_t,
              simpleble_uuid_t)>>('simpleble_peripheral_unsubscribe');
  late final _simpleble_peripheral_unsubscribe =
      _simpleble_peripheral_unsubscribePtr.asFunction<
          int Function(
              simpleble_peripheral_t, simpleble_uuid_t, simpleble_uuid_t)>();

  /// @brief
  ///
  /// @param handle
  /// @param service
  /// @param characteristic
  /// @param descriptor
  /// @param data
  /// @param data_length
  /// @return simpleble_err_t
  int simpleble_peripheral_read_descriptor(
    simpleble_peripheral_t handle,
    simpleble_uuid_t service,
    simpleble_uuid_t characteristic,
    simpleble_uuid_t descriptor,
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> data,
    ffi.Pointer<ffi.Size> data_length,
  ) {
    return _simpleble_peripheral_read_descriptor(
      handle,
      service,
      characteristic,
      descriptor,
      data,
      data_length,
    );
  }

  late final _simpleble_peripheral_read_descriptorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              simpleble_peripheral_t,
              simpleble_uuid_t,
              simpleble_uuid_t,
              simpleble_uuid_t,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Size>)>>('simpleble_peripheral_read_descriptor');
  late final _simpleble_peripheral_read_descriptor =
      _simpleble_peripheral_read_descriptorPtr.asFunction<
          int Function(
              simpleble_peripheral_t,
              simpleble_uuid_t,
              simpleble_uuid_t,
              simpleble_uuid_t,
              ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
              ffi.Pointer<ffi.Size>)>();

  /// @brief
  ///
  /// @param handle
  /// @param service
  /// @param characteristic
  /// @param descriptor
  /// @param data
  /// @param data_length
  /// @return simpleble_err_t
  int simpleble_peripheral_write_descriptor(
    simpleble_peripheral_t handle,
    simpleble_uuid_t service,
    simpleble_uuid_t characteristic,
    simpleble_uuid_t descriptor,
    ffi.Pointer<ffi.Uint8> data,
    int data_length,
  ) {
    return _simpleble_peripheral_write_descriptor(
      handle,
      service,
      characteristic,
      descriptor,
      data,
      data_length,
    );
  }

  late final _simpleble_peripheral_write_descriptorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              simpleble_peripheral_t,
              simpleble_uuid_t,
              simpleble_uuid_t,
              simpleble_uuid_t,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size)>>('simpleble_peripheral_write_descriptor');
  late final _simpleble_peripheral_write_descriptor =
      _simpleble_peripheral_write_descriptorPtr.asFunction<
          int Function(
              simpleble_peripheral_t,
              simpleble_uuid_t,
              simpleble_uuid_t,
              simpleble_uuid_t,
              ffi.Pointer<ffi.Uint8>,
              int)>();

  /// @brief
  ///
  /// @param handle
  /// @param callback
  /// @return simpleble_err_t
  int simpleble_peripheral_set_callback_on_connected(
    simpleble_peripheral_t handle,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(simpleble_peripheral_t peripheral,
                    ffi.Pointer<ffi.Void> userdata)>>
        callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _simpleble_peripheral_set_callback_on_connected(
      handle,
      callback,
      userdata,
    );
  }

  late final _simpleble_peripheral_set_callback_on_connectedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  simpleble_peripheral_t,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(simpleble_peripheral_t peripheral,
                              ffi.Pointer<ffi.Void> userdata)>>,
                  ffi.Pointer<ffi.Void>)>>(
      'simpleble_peripheral_set_callback_on_connected');
  late final _simpleble_peripheral_set_callback_on_connected =
      _simpleble_peripheral_set_callback_on_connectedPtr.asFunction<
          int Function(
              simpleble_peripheral_t,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(simpleble_peripheral_t peripheral,
                          ffi.Pointer<ffi.Void> userdata)>>,
              ffi.Pointer<ffi.Void>)>();

  /// @brief
  ///
  /// @param handle
  /// @param callback
  /// @return simpleble_err_t
  int simpleble_peripheral_set_callback_on_disconnected(
    simpleble_peripheral_t handle,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Void Function(simpleble_peripheral_t peripheral,
                    ffi.Pointer<ffi.Void> userdata)>>
        callback,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _simpleble_peripheral_set_callback_on_disconnected(
      handle,
      callback,
      userdata,
    );
  }

  late final _simpleble_peripheral_set_callback_on_disconnectedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  simpleble_peripheral_t,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(simpleble_peripheral_t peripheral,
                              ffi.Pointer<ffi.Void> userdata)>>,
                  ffi.Pointer<ffi.Void>)>>(
      'simpleble_peripheral_set_callback_on_disconnected');
  late final _simpleble_peripheral_set_callback_on_disconnected =
      _simpleble_peripheral_set_callback_on_disconnectedPtr.asFunction<
          int Function(
              simpleble_peripheral_t,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(simpleble_peripheral_t peripheral,
                          ffi.Pointer<ffi.Void> userdata)>>,
              ffi.Pointer<ffi.Void>)>();

  /// @brief Wrapper around free() to allow memory to be cleared
  /// within the library.
  ///
  /// @param handle
  void simpleble_free(
    ffi.Pointer<ffi.Void> handle,
  ) {
    return _simpleble_free(
      handle,
    );
  }

  late final _simpleble_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'simpleble_free');
  late final _simpleble_free =
      _simpleble_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();
}

abstract class simpleble_err_t {
  static const int SIMPLEBLE_SUCCESS = 0;
  static const int SIMPLEBLE_FAILURE = 1;
}

final class simpleble_uuid_t extends ffi.Struct {
  @ffi.Array.multi([37])
  external ffi.Array<ffi.Char> value;
}

final class simpleble_descriptor_t extends ffi.Struct {
  external simpleble_uuid_t uuid;
}

final class simpleble_characteristic_t extends ffi.Struct {
  external simpleble_uuid_t uuid;

  @ffi.Bool()
  external bool can_read;

  @ffi.Bool()
  external bool can_write_request;

  @ffi.Bool()
  external bool can_write_command;

  @ffi.Bool()
  external bool can_notify;

  @ffi.Bool()
  external bool can_indicate;

  @ffi.Size()
  external int descriptor_count;

  @ffi.Array.multi([16])
  external ffi.Array<simpleble_descriptor_t> descriptors;
}

final class simpleble_service_t extends ffi.Struct {
  external simpleble_uuid_t uuid;

  @ffi.Size()
  external int data_length;

  @ffi.Array.multi([27])
  external ffi.Array<ffi.Uint8> data;

  @ffi.Size()
  external int characteristic_count;

  @ffi.Array.multi([16])
  external ffi.Array<simpleble_characteristic_t> characteristics;
}

final class simpleble_manufacturer_data_t extends ffi.Struct {
  @ffi.Uint16()
  external int manufacturer_id;

  @ffi.Size()
  external int data_length;

  @ffi.Array.multi([27])
  external ffi.Array<ffi.Uint8> data;
}

abstract class simpleble_os_t {
  static const int SIMPLEBLE_OS_WINDOWS = 0;
  static const int SIMPLEBLE_OS_MACOS = 1;
  static const int SIMPLEBLE_OS_LINUX = 2;
}

abstract class simpleble_address_type_t {
  static const int SIMPLEBLE_ADDRESS_TYPE_PUBLIC = 0;
  static const int SIMPLEBLE_ADDRESS_TYPE_RANDOM = 1;
  static const int SIMPLEBLE_ADDRESS_TYPE_UNSPECIFIED = 2;
}

typedef simpleble_adapter_t = ffi.Pointer<ffi.Void>;
typedef simpleble_peripheral_t = ffi.Pointer<ffi.Void>;

const int SIMPLEBLE_UUID_STR_LEN = 37;

const int SIMPLEBLE_CHARACTERISTIC_MAX_COUNT = 16;

const int SIMPLEBLE_DESCRIPTOR_MAX_COUNT = 16;
